#!/usr/bin/env bash

# Waybar Dynamic CSS Generator
# Generates per-monitor CSS rules based on Hyprland scaling
# This ensures consistent visual sizing across different DPI displays

set -euo pipefail

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
OUTPUT_FILE="$SCRIPT_DIR/scaling.css"

# Base sizes (defined for scale=1.0, standard DPI)
# These are the sizes that look good on a standard 1080p monitor
BASE_FONT_SIZE=14
BASE_ICON_SIZE=18
BASE_ICON_ACTIVE=22
BASE_HEIGHT=40
BASE_PADDING=5
BASE_MARGIN=5

# Check dependencies
if ! command -v hyprctl &> /dev/null; then
    echo -e "${YELLOW}Warning: hyprctl not found. Using default values.${NC}" >&2
    # Create minimal CSS with defaults
    cat > "$OUTPUT_FILE" << EOF
/* Generated Waybar Scaling CSS - Default values (hyprctl not available) */
/* Generated: $(date) */

* {
    font-size: ${BASE_FONT_SIZE}px;
}
EOF
    exit 0
fi

if ! command -v jq &> /dev/null; then
    echo -e "${YELLOW}Warning: jq not found. Install with: sudo pacman -S jq${NC}" >&2
    echo -e "${YELLOW}Using default values.${NC}" >&2
    cat > "$OUTPUT_FILE" << EOF
/* Generated Waybar Scaling CSS - Default values (jq not available) */
/* Generated: $(date) */

* {
    font-size: ${BASE_FONT_SIZE}px;
}
EOF
    exit 0
fi

# Get monitor information from Hyprland
MONITORS_JSON=$(hyprctl monitors -j 2>/dev/null || echo "[]")

# Check if we got valid JSON
if [[ "$MONITORS_JSON" == "[]" ]]; then
    echo -e "${YELLOW}Warning: No monitors detected or Hyprland not running.${NC}" >&2
    echo -e "${YELLOW}Using default values.${NC}" >&2
    cat > "$OUTPUT_FILE" << EOF
/* Generated Waybar Scaling CSS - Default values (no monitors detected) */
/* Generated: $(date) */

* {
    font-size: ${BASE_FONT_SIZE}px;
}
EOF
    exit 0
fi

# Calculate scaled values
# Formula: scaled_value = round(base_value * scale_factor)
calc_scaled() {
    local base=$1
    local scale=$2
    # Use bc for floating point math, round to nearest integer
    echo "scale=0; ($base * $scale + 0.5) / 1" | bc
}

# Start generating CSS
cat > "$OUTPUT_FILE" << 'EOF'
/* Generated Waybar Scaling CSS */
/* DO NOT EDIT MANUALLY - This file is auto-generated by generate-waybar-css.sh */
/* Regenerate with: ./waybar/generate-waybar-css.sh */
EOF

echo "/* Generated: $(date) */" >> "$OUTPUT_FILE"
echo "" >> "$OUTPUT_FILE"

# Extract monitor data and generate CSS for each
echo "$MONITORS_JSON" | jq -r '.[] | "\(.name) \(.scale)"' | while read -r monitor_name scale; do
    # Calculate scaled sizes
    font_size=$(calc_scaled $BASE_FONT_SIZE "$scale")
    icon_size=$(calc_scaled $BASE_ICON_SIZE "$scale")
    icon_active=$(calc_scaled $BASE_ICON_ACTIVE "$scale")
    height=$(calc_scaled $BASE_HEIGHT "$scale")
    padding=$(calc_scaled $BASE_PADDING "$scale")
    margin=$(calc_scaled $BASE_MARGIN "$scale")

    # Generate CSS rules for this monitor
    cat >> "$OUTPUT_FILE" << MONITOR_CSS

/* Monitor: $monitor_name (scale: $scale) */
window.$monitor_name * {
    font-size: ${font_size}px;
}

window.$monitor_name #waybar {
    margin: ${margin}px ${margin}px;
}

window.$monitor_name #workspaces {
    margin: ${padding}px;
}

window.$monitor_name #workspaces button {
    padding: ${padding}px;
    font-size: ${icon_size}px;
}

window.$monitor_name #workspaces button.active,
window.$monitor_name #workspaces button.urgent {
    font-size: ${icon_active}px;
}

window.$monitor_name #window {
    margin: ${padding}px;
    padding: ${padding}px ${padding}px;
}

window.$monitor_name #clock {
    margin: ${padding}px ${padding}px;
}

window.$monitor_name #tray {
    margin-left: ${padding}px;
}

window.$monitor_name #bluetooth,
window.$monitor_name #pulseaudio,
window.$monitor_name #network,
window.$monitor_name #cpu,
window.$monitor_name #battery {
    padding: ${padding}px ${padding}px;
}

window.$monitor_name #custom-power {
    margin-right: ${padding}px;
}

MONITOR_CSS
done

# Add fallback default styles for any unmatched monitors
cat >> "$OUTPUT_FILE" << EOF

/* Fallback defaults for unmatched monitors */
* {
    font-size: ${BASE_FONT_SIZE}px;
}
EOF

# Print summary
monitor_count=$(echo "$MONITORS_JSON" | jq '. | length')
echo -e "${GREEN}✓${NC} Generated scaling CSS for $monitor_count monitor(s)"
echo -e "${BLUE}→${NC} Output: $OUTPUT_FILE"

# List detected monitors
echo ""
echo -e "${BLUE}Detected monitors:${NC}"
echo "$MONITORS_JSON" | jq -r '.[] | "  • \(.name): \(.width)x\(.height) @ scale \(.scale)"'

# Reload Waybar if it's running
if pgrep -x waybar > /dev/null; then
    echo ""
    echo -e "${BLUE}→${NC} Reloading Waybar..."
    pkill -SIGUSR2 waybar 2>/dev/null || {
        pkill waybar
        sleep 0.5
        waybar &
        disown
    }
    echo -e "${GREEN}✓${NC} Waybar reloaded"
fi

exit 0
